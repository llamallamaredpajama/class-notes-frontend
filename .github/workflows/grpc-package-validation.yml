name: gRPC Package Validation

on:
  push:
    branches: [main, develop]
    paths:
      - "Frontend/**"
      - ".github/workflows/grpc-package-validation.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "Frontend/**"
      - ".github/workflows/grpc-package-validation.yml"

jobs:
  validate-grpc-packages:
    name: Validate gRPC Swift Packages
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.4"

      - name: Check for gRPC package conflicts
        working-directory: Frontend
        run: |
          echo "üîç Running gRPC package validation in CI/CD..."

          # Make scripts executable
          chmod +x Scripts/validate-packages.sh Scripts/clean-packages.sh

          # Run validation
          ./Scripts/validate-packages.sh

      - name: Validate buf configuration
        working-directory: Frontend/class-notes-frontend
        run: |
          echo "üìÑ Validating buf.gen.yaml configuration..."

          # Check that buf.gen.yaml uses v2 plugin
          if ! grep -q "buf.build/grpc/swift:v2" buf.gen.yaml; then
            echo "‚ùå ERROR: buf.gen.yaml not configured for gRPC Swift v2!"
            echo "Expected: plugin: buf.build/grpc/swift:v2.0.0"
            exit 1
          fi

          echo "‚úÖ buf.gen.yaml correctly configured for gRPC Swift v2"

      - name: Check for problematic imports in Swift files
        working-directory: Frontend
        run: |
          echo "üì± Scanning Swift files for problematic imports..."

          # Find Swift files with old gRPC imports
          PROBLEMATIC_FILES=$(find class-notes-frontend -name "*.swift" -exec grep -l "import GRPC[^C]" {} \; 2>/dev/null || true)

          if [ -n "$PROBLEMATIC_FILES" ]; then
            echo "‚ö†Ô∏è  Found Swift files with potentially problematic imports:"
            echo "$PROBLEMATIC_FILES"
            echo ""
            echo "Consider updating these imports for better gRPC Swift v2 compatibility:"
            echo "  import GRPC ‚Üí import GRPCCore"
            echo "  import NIOCore ‚Üí use through GRPCCore"
            echo "  import NIOHTTP2 ‚Üí import GRPCNIOTransportHTTP2"
          else
            echo "‚úÖ No problematic imports found"
          fi

      - name: Validate project builds (if Package.resolved exists)
        working-directory: Frontend
        run: |
          PACKAGE_RESOLVED="class-notes-frontend.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"

          if [ -f "$PACKAGE_RESOLVED" ]; then
            echo "üì¶ Package.resolved found, attempting to validate build..."
            
            # Reset package caches
            rm -rf ~/Library/Developer/Xcode/DerivedData/*
            rm -rf ~/Library/Caches/org.swift.swiftpm
            
            # Try to resolve packages (this will fail if there are conflicts)
            echo "Resolving packages..."
            xcodebuild -resolvePackageDependencies -project class-notes-frontend.xcodeproj -scheme class-notes-frontend
            
            echo "‚úÖ Package resolution successful"
          else
            echo "‚ÑπÔ∏è  No Package.resolved found, skipping build validation"
          fi

      - name: Report validation results
        if: always()
        run: |
          echo ""
          echo "=================================================="
          echo "üéØ gRPC Package Validation Summary"
          echo "=================================================="
          echo ""

          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ All validations passed!"
            echo "‚úÖ No gRPC package conflicts detected"
            echo "‚úÖ Project configuration is correct for gRPC Swift v2"
            echo "‚úÖ Safe to merge"
          else
            echo "üí• Validation failed!"
            echo "‚ùå gRPC package conflicts detected"
            echo "‚ùå Project needs fixes before merge"
            echo ""
            echo "To fix locally:"
            echo "1. cd Frontend"
            echo "2. ./Scripts/clean-packages.sh"
            echo "3. Open Xcode, File ‚Üí Packages ‚Üí Reset Package Caches"
            echo "4. Wait for package resolution"
            echo "5. ./Scripts/validate-packages.sh"
            echo "6. Commit and push fixes"
          fi

  # Additional job to validate consistency across team
  check-team-consistency:
    name: Check Team Package Consistency
    runs-on: macos-latest
    needs: validate-grpc-packages
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      - name: Compare Package.resolved files
        run: |
          echo "üîç Checking for Package.resolved changes..."

          FRONTEND_PACKAGE_RESOLVED="Frontend/class-notes-frontend.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"

          git checkout ${{ github.head_ref }}

          if [ -f "$FRONTEND_PACKAGE_RESOLVED" ]; then
            # Check if Package.resolved changed
            if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "Package.resolved"; then
              echo "üì¶ Package.resolved has changes in this PR"
              
              # Show the changes
              echo "Changes:"
              git diff origin/${{ github.base_ref }}..HEAD -- "$FRONTEND_PACKAGE_RESOLVED" || true
              
              # Validate the new Package.resolved doesn't have conflicts
              if grep -q '"grpc-swift-protobuf"' "$FRONTEND_PACKAGE_RESOLVED"; then
                echo "‚ùå ERROR: New Package.resolved includes problematic grpc-swift-protobuf!"
                exit 1
              fi
              
              if grep -q '"grpc-swift-nio-transport"' "$FRONTEND_PACKAGE_RESOLVED"; then
                VERSION=$(grep -A 10 '"grpc-swift-nio-transport"' "$FRONTEND_PACKAGE_RESOLVED" | grep '"version"' | head -1 | sed 's/.*"version" : "\([^"]*\)".*/\1/')
                if [[ "$VERSION" =~ ^1\. ]]; then
                  echo "‚ùå ERROR: New Package.resolved includes grpc-swift-nio-transport v1.x ($VERSION)!"
                  exit 1
                fi
              fi
              
              echo "‚úÖ Package.resolved changes look good"
            else
              echo "‚ÑπÔ∏è  No Package.resolved changes in this PR"
            fi
          else
            echo "‚ÑπÔ∏è  No Package.resolved file found"
          fi
