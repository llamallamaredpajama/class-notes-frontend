// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: subscription.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - classnotes.v1.SubscriptionService

/// Namespace containing generated types for the "classnotes.v1.SubscriptionService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum ClassNotes_V1_SubscriptionService {
    /// Service descriptor for the "classnotes.v1.SubscriptionService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "ValidateReceipt" metadata.
        internal enum ValidateReceipt {
            /// Request type for "ValidateReceipt".
            internal typealias Input = ClassNotes_V1_ValidateReceiptRequest
            /// Response type for "ValidateReceipt".
            internal typealias Output = ClassNotes_V1_ValidateReceiptResponse
            /// Descriptor for "ValidateReceipt".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService"),
                method: "ValidateReceipt"
            )
        }
        /// Namespace for "GetSubscriptionStatus" metadata.
        internal enum GetSubscriptionStatus {
            /// Request type for "GetSubscriptionStatus".
            internal typealias Input = SwiftProtobuf.Google_Protobuf_Empty
            /// Response type for "GetSubscriptionStatus".
            internal typealias Output = ClassNotes_V1_SubscriptionStatusResponse
            /// Descriptor for "GetSubscriptionStatus".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService"),
                method: "GetSubscriptionStatus"
            )
        }
        /// Namespace for "GetUsageStatistics" metadata.
        internal enum GetUsageStatistics {
            /// Request type for "GetUsageStatistics".
            internal typealias Input = SwiftProtobuf.Google_Protobuf_Empty
            /// Response type for "GetUsageStatistics".
            internal typealias Output = ClassNotes_V1_UsageStatisticsResponse
            /// Descriptor for "GetUsageStatistics".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService"),
                method: "GetUsageStatistics"
            )
        }
        /// Namespace for "RegisterDevice" metadata.
        internal enum RegisterDevice {
            /// Request type for "RegisterDevice".
            internal typealias Input = ClassNotes_V1_RegisterDeviceRequest
            /// Response type for "RegisterDevice".
            internal typealias Output = ClassNotes_V1_RegisterDeviceResponse
            /// Descriptor for "RegisterDevice".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService"),
                method: "RegisterDevice"
            )
        }
        /// Descriptors for all methods in the "classnotes.v1.SubscriptionService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            ValidateReceipt.descriptor,
            GetSubscriptionStatus.descriptor,
            GetUsageStatistics.descriptor,
            RegisterDevice.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "classnotes.v1.SubscriptionService" service.
    internal static let classNotes_v1_SubscriptionService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.SubscriptionService")
}

// MARK: classnotes.v1.SubscriptionService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService {
    /// Streaming variant of the service protocol for the "classnotes.v1.SubscriptionService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Subscription service for managing user subscriptions and tiers
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ValidateReceipt" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validate an Apple receipt and update subscription status
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ClassNotes_V1_ValidateReceiptRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ClassNotes_V1_ValidateReceiptResponse` messages.
        func validateReceipt(
            request: GRPCCore.StreamingServerRequest<ClassNotes_V1_ValidateReceiptRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_ValidateReceiptResponse>

        /// Handle the "GetSubscriptionStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current subscription status for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ClassNotes_V1_SubscriptionStatusResponse` messages.
        func getSubscriptionStatus(
            request: GRPCCore.StreamingServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_SubscriptionStatusResponse>

        /// Handle the "GetUsageStatistics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get detailed usage statistics for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ClassNotes_V1_UsageStatisticsResponse` messages.
        func getUsageStatistics(
            request: GRPCCore.StreamingServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_UsageStatisticsResponse>

        /// Handle the "RegisterDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Register a device for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ClassNotes_V1_RegisterDeviceRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ClassNotes_V1_RegisterDeviceResponse` messages.
        func registerDevice(
            request: GRPCCore.StreamingServerRequest<ClassNotes_V1_RegisterDeviceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_RegisterDeviceResponse>
    }

    /// Service protocol for the "classnotes.v1.SubscriptionService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Subscription service for managing user subscriptions and tiers
    internal protocol ServiceProtocol: ClassNotes_V1_SubscriptionService.StreamingServiceProtocol {
        /// Handle the "ValidateReceipt" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validate an Apple receipt and update subscription status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_ValidateReceiptRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ClassNotes_V1_ValidateReceiptResponse` message.
        func validateReceipt(
            request: GRPCCore.ServerRequest<ClassNotes_V1_ValidateReceiptRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_ValidateReceiptResponse>

        /// Handle the "GetSubscriptionStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current subscription status for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ClassNotes_V1_SubscriptionStatusResponse` message.
        func getSubscriptionStatus(
            request: GRPCCore.ServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_SubscriptionStatusResponse>

        /// Handle the "GetUsageStatistics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get detailed usage statistics for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ClassNotes_V1_UsageStatisticsResponse` message.
        func getUsageStatistics(
            request: GRPCCore.ServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_UsageStatisticsResponse>

        /// Handle the "RegisterDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Register a device for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_RegisterDeviceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ClassNotes_V1_RegisterDeviceResponse` message.
        func registerDevice(
            request: GRPCCore.ServerRequest<ClassNotes_V1_RegisterDeviceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_RegisterDeviceResponse>
    }

    /// Simple service protocol for the "classnotes.v1.SubscriptionService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Subscription service for managing user subscriptions and tiers
    internal protocol SimpleServiceProtocol: ClassNotes_V1_SubscriptionService.ServiceProtocol {
        /// Handle the "ValidateReceipt" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validate an Apple receipt and update subscription status
        ///
        /// - Parameters:
        ///   - request: A `ClassNotes_V1_ValidateReceiptRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ClassNotes_V1_ValidateReceiptResponse` to respond with.
        func validateReceipt(
            request: ClassNotes_V1_ValidateReceiptRequest,
            context: GRPCCore.ServerContext
        ) async throws -> ClassNotes_V1_ValidateReceiptResponse

        /// Handle the "GetSubscriptionStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current subscription status for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ClassNotes_V1_SubscriptionStatusResponse` to respond with.
        func getSubscriptionStatus(
            request: SwiftProtobuf.Google_Protobuf_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> ClassNotes_V1_SubscriptionStatusResponse

        /// Handle the "GetUsageStatistics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get detailed usage statistics for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ClassNotes_V1_UsageStatisticsResponse` to respond with.
        func getUsageStatistics(
            request: SwiftProtobuf.Google_Protobuf_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> ClassNotes_V1_UsageStatisticsResponse

        /// Handle the "RegisterDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Register a device for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A `ClassNotes_V1_RegisterDeviceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ClassNotes_V1_RegisterDeviceResponse` to respond with.
        func registerDevice(
            request: ClassNotes_V1_RegisterDeviceRequest,
            context: GRPCCore.ServerContext
        ) async throws -> ClassNotes_V1_RegisterDeviceResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: ClassNotes_V1_SubscriptionService.Method.ValidateReceipt.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_ValidateReceiptRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_ValidateReceiptResponse>(),
            handler: { request, context in
                try await self.validateReceipt(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ClassNotes_V1_SubscriptionService.Method.GetSubscriptionStatus.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_SubscriptionStatusResponse>(),
            handler: { request, context in
                try await self.getSubscriptionStatus(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ClassNotes_V1_SubscriptionService.Method.GetUsageStatistics.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_UsageStatisticsResponse>(),
            handler: { request, context in
                try await self.getUsageStatistics(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ClassNotes_V1_SubscriptionService.Method.RegisterDevice.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_RegisterDeviceRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_RegisterDeviceResponse>(),
            handler: { request, context in
                try await self.registerDevice(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService.ServiceProtocol {
    internal func validateReceipt(
        request: GRPCCore.StreamingServerRequest<ClassNotes_V1_ValidateReceiptRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_ValidateReceiptResponse> {
        let response = try await self.validateReceipt(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getSubscriptionStatus(
        request: GRPCCore.StreamingServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_SubscriptionStatusResponse> {
        let response = try await self.getSubscriptionStatus(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getUsageStatistics(
        request: GRPCCore.StreamingServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_UsageStatisticsResponse> {
        let response = try await self.getUsageStatistics(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func registerDevice(
        request: GRPCCore.StreamingServerRequest<ClassNotes_V1_RegisterDeviceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ClassNotes_V1_RegisterDeviceResponse> {
        let response = try await self.registerDevice(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService.SimpleServiceProtocol {
    internal func validateReceipt(
        request: GRPCCore.ServerRequest<ClassNotes_V1_ValidateReceiptRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_ValidateReceiptResponse> {
        return GRPCCore.ServerResponse<ClassNotes_V1_ValidateReceiptResponse>(
            message: try await self.validateReceipt(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getSubscriptionStatus(
        request: GRPCCore.ServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_SubscriptionStatusResponse> {
        return GRPCCore.ServerResponse<ClassNotes_V1_SubscriptionStatusResponse>(
            message: try await self.getSubscriptionStatus(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getUsageStatistics(
        request: GRPCCore.ServerRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_UsageStatisticsResponse> {
        return GRPCCore.ServerResponse<ClassNotes_V1_UsageStatisticsResponse>(
            message: try await self.getUsageStatistics(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func registerDevice(
        request: GRPCCore.ServerRequest<ClassNotes_V1_RegisterDeviceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ClassNotes_V1_RegisterDeviceResponse> {
        return GRPCCore.ServerResponse<ClassNotes_V1_RegisterDeviceResponse>(
            message: try await self.registerDevice(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: classnotes.v1.SubscriptionService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService {
    /// Generated client protocol for the "classnotes.v1.SubscriptionService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Subscription service for managing user subscriptions and tiers
    internal protocol ClientProtocol: Sendable {
        /// Call the "ValidateReceipt" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validate an Apple receipt and update subscription status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_ValidateReceiptRequest` message.
        ///   - serializer: A serializer for `ClassNotes_V1_ValidateReceiptRequest` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_ValidateReceiptResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func validateReceipt<Result>(
            request: GRPCCore.ClientRequest<ClassNotes_V1_ValidateReceiptRequest>,
            serializer: some GRPCCore.MessageSerializer<ClassNotes_V1_ValidateReceiptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_ValidateReceiptResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_ValidateReceiptResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSubscriptionStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current subscription status for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_SubscriptionStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSubscriptionStatus<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_SubscriptionStatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_SubscriptionStatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUsageStatistics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get detailed usage statistics for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_UsageStatisticsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUsageStatistics<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_UsageStatisticsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_UsageStatisticsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RegisterDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Register a device for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_RegisterDeviceRequest` message.
        ///   - serializer: A serializer for `ClassNotes_V1_RegisterDeviceRequest` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_RegisterDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func registerDevice<Result>(
            request: GRPCCore.ClientRequest<ClassNotes_V1_RegisterDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<ClassNotes_V1_RegisterDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_RegisterDeviceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_RegisterDeviceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "classnotes.v1.SubscriptionService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Subscription service for managing user subscriptions and tiers
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ValidateReceipt" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validate an Apple receipt and update subscription status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_ValidateReceiptRequest` message.
        ///   - serializer: A serializer for `ClassNotes_V1_ValidateReceiptRequest` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_ValidateReceiptResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func validateReceipt<Result>(
            request: GRPCCore.ClientRequest<ClassNotes_V1_ValidateReceiptRequest>,
            serializer: some GRPCCore.MessageSerializer<ClassNotes_V1_ValidateReceiptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_ValidateReceiptResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_ValidateReceiptResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ClassNotes_V1_SubscriptionService.Method.ValidateReceipt.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSubscriptionStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current subscription status for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_SubscriptionStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getSubscriptionStatus<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_SubscriptionStatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_SubscriptionStatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ClassNotes_V1_SubscriptionService.Method.GetSubscriptionStatus.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUsageStatistics" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get detailed usage statistics for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_UsageStatisticsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUsageStatistics<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_UsageStatisticsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_UsageStatisticsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ClassNotes_V1_SubscriptionService.Method.GetUsageStatistics.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RegisterDevice" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Register a device for the authenticated user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ClassNotes_V1_RegisterDeviceRequest` message.
        ///   - serializer: A serializer for `ClassNotes_V1_RegisterDeviceRequest` messages.
        ///   - deserializer: A deserializer for `ClassNotes_V1_RegisterDeviceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func registerDevice<Result>(
            request: GRPCCore.ClientRequest<ClassNotes_V1_RegisterDeviceRequest>,
            serializer: some GRPCCore.MessageSerializer<ClassNotes_V1_RegisterDeviceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ClassNotes_V1_RegisterDeviceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_RegisterDeviceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ClassNotes_V1_SubscriptionService.Method.RegisterDevice.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService.ClientProtocol {
    /// Call the "ValidateReceipt" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Validate an Apple receipt and update subscription status
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ClassNotes_V1_ValidateReceiptRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func validateReceipt<Result>(
        request: GRPCCore.ClientRequest<ClassNotes_V1_ValidateReceiptRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_ValidateReceiptResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.validateReceipt(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_ValidateReceiptRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_ValidateReceiptResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSubscriptionStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current subscription status for the authenticated user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSubscriptionStatus<Result>(
        request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_SubscriptionStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSubscriptionStatus(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_SubscriptionStatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsageStatistics" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get detailed usage statistics for the authenticated user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUsageStatistics<Result>(
        request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_UsageStatisticsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUsageStatistics(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_UsageStatisticsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RegisterDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Register a device for the authenticated user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ClassNotes_V1_RegisterDeviceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func registerDevice<Result>(
        request: GRPCCore.ClientRequest<ClassNotes_V1_RegisterDeviceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_RegisterDeviceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.registerDevice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ClassNotes_V1_RegisterDeviceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ClassNotes_V1_RegisterDeviceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension ClassNotes_V1_SubscriptionService.ClientProtocol {
    /// Call the "ValidateReceipt" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Validate an Apple receipt and update subscription status
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func validateReceipt<Result>(
        _ message: ClassNotes_V1_ValidateReceiptRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_ValidateReceiptResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ClassNotes_V1_ValidateReceiptRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.validateReceipt(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSubscriptionStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current subscription status for the authenticated user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getSubscriptionStatus<Result>(
        _ message: SwiftProtobuf.Google_Protobuf_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_SubscriptionStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.getSubscriptionStatus(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsageStatistics" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get detailed usage statistics for the authenticated user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUsageStatistics<Result>(
        _ message: SwiftProtobuf.Google_Protobuf_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_UsageStatisticsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.getUsageStatistics(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RegisterDevice" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Register a device for the authenticated user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func registerDevice<Result>(
        _ message: ClassNotes_V1_RegisterDeviceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ClassNotes_V1_RegisterDeviceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ClassNotes_V1_RegisterDeviceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.registerDevice(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}