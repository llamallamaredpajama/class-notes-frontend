// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: classnotes/v1/classnotes_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - classnotes.v1.ClassNotesAPI

/// Namespace containing generated types for the "classnotes.v1.ClassNotesAPI" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Classnotes_V1_ClassNotesAPI {
    /// Service descriptor for the "classnotes.v1.ClassNotesAPI" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "UploadTranscript" metadata.
        public enum UploadTranscript {
            /// Request type for "UploadTranscript".
            public typealias Input = Classnotes_V1_UploadTranscriptRequest
            /// Response type for "UploadTranscript".
            public typealias Output = Classnotes_V1_UploadTranscriptResponse
            /// Descriptor for "UploadTranscript".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI"),
                method: "UploadTranscript"
            )
        }
        /// Namespace for "ListClassNotes" metadata.
        public enum ListClassNotes {
            /// Request type for "ListClassNotes".
            public typealias Input = Classnotes_V1_ListClassNotesRequest
            /// Response type for "ListClassNotes".
            public typealias Output = Classnotes_V1_ListClassNotesResponse
            /// Descriptor for "ListClassNotes".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI"),
                method: "ListClassNotes"
            )
        }
        /// Namespace for "GetClassNote" metadata.
        public enum GetClassNote {
            /// Request type for "GetClassNote".
            public typealias Input = Classnotes_V1_GetClassNoteRequest
            /// Response type for "GetClassNote".
            public typealias Output = Classnotes_V1_GetClassNoteResponse
            /// Descriptor for "GetClassNote".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI"),
                method: "GetClassNote"
            )
        }
        /// Namespace for "DeleteClassNote" metadata.
        public enum DeleteClassNote {
            /// Request type for "DeleteClassNote".
            public typealias Input = Classnotes_V1_DeleteClassNoteRequest
            /// Response type for "DeleteClassNote".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteClassNote".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI"),
                method: "DeleteClassNote"
            )
        }
        /// Descriptors for all methods in the "classnotes.v1.ClassNotesAPI" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            UploadTranscript.descriptor,
            ListClassNotes.descriptor,
            GetClassNote.descriptor,
            DeleteClassNote.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "classnotes.v1.ClassNotesAPI" service.
    public static let classnotes_v1_ClassNotesAPI = GRPCCore.ServiceDescriptor(fullyQualifiedService: "classnotes.v1.ClassNotesAPI")
}

// MARK: classnotes.v1.ClassNotesAPI (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Classnotes_V1_ClassNotesAPI {
    /// Generated client protocol for the "classnotes.v1.ClassNotesAPI" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ClassNotes service for managing class notes
    public protocol ClientProtocol: Sendable {
        /// Call the "UploadTranscript" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a transcript
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_UploadTranscriptRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_UploadTranscriptRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_UploadTranscriptResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func uploadTranscript<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_UploadTranscriptRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_UploadTranscriptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_UploadTranscriptResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_UploadTranscriptResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListClassNotes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List class notes
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_ListClassNotesRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_ListClassNotesRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_ListClassNotesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listClassNotes<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_ListClassNotesRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_ListClassNotesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_ListClassNotesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_ListClassNotesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetClassNote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a class note
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_GetClassNoteRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_GetClassNoteRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_GetClassNoteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getClassNote<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_GetClassNoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_GetClassNoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_GetClassNoteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_GetClassNoteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteClassNote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a class note
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_DeleteClassNoteRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_DeleteClassNoteRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteClassNote<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_DeleteClassNoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_DeleteClassNoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "classnotes.v1.ClassNotesAPI" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ClassNotes service for managing class notes
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "UploadTranscript" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a transcript
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_UploadTranscriptRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_UploadTranscriptRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_UploadTranscriptResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func uploadTranscript<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_UploadTranscriptRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_UploadTranscriptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_UploadTranscriptResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_UploadTranscriptResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Classnotes_V1_ClassNotesAPI.Method.UploadTranscript.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListClassNotes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List class notes
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_ListClassNotesRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_ListClassNotesRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_ListClassNotesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listClassNotes<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_ListClassNotesRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_ListClassNotesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_ListClassNotesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_ListClassNotesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Classnotes_V1_ClassNotesAPI.Method.ListClassNotes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetClassNote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a class note
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_GetClassNoteRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_GetClassNoteRequest` messages.
        ///   - deserializer: A deserializer for `Classnotes_V1_GetClassNoteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getClassNote<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_GetClassNoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_GetClassNoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Classnotes_V1_GetClassNoteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_GetClassNoteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Classnotes_V1_ClassNotesAPI.Method.GetClassNote.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteClassNote" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a class note
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Classnotes_V1_DeleteClassNoteRequest` message.
        ///   - serializer: A serializer for `Classnotes_V1_DeleteClassNoteRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteClassNote<Result>(
            request: GRPCCore.ClientRequest<Classnotes_V1_DeleteClassNoteRequest>,
            serializer: some GRPCCore.MessageSerializer<Classnotes_V1_DeleteClassNoteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Classnotes_V1_ClassNotesAPI.Method.DeleteClassNote.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Classnotes_V1_ClassNotesAPI.ClientProtocol {
    /// Call the "UploadTranscript" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upload a transcript
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Classnotes_V1_UploadTranscriptRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func uploadTranscript<Result>(
        request: GRPCCore.ClientRequest<Classnotes_V1_UploadTranscriptRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_UploadTranscriptResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.uploadTranscript(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Classnotes_V1_UploadTranscriptRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Classnotes_V1_UploadTranscriptResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClassNotes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List class notes
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Classnotes_V1_ListClassNotesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listClassNotes<Result>(
        request: GRPCCore.ClientRequest<Classnotes_V1_ListClassNotesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_ListClassNotesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listClassNotes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Classnotes_V1_ListClassNotesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Classnotes_V1_ListClassNotesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetClassNote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a class note
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Classnotes_V1_GetClassNoteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getClassNote<Result>(
        request: GRPCCore.ClientRequest<Classnotes_V1_GetClassNoteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_GetClassNoteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getClassNote(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Classnotes_V1_GetClassNoteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Classnotes_V1_GetClassNoteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteClassNote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a class note
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Classnotes_V1_DeleteClassNoteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteClassNote<Result>(
        request: GRPCCore.ClientRequest<Classnotes_V1_DeleteClassNoteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteClassNote(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Classnotes_V1_DeleteClassNoteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Classnotes_V1_ClassNotesAPI.ClientProtocol {
    /// Call the "UploadTranscript" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upload a transcript
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func uploadTranscript<Result>(
        _ message: Classnotes_V1_UploadTranscriptRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_UploadTranscriptResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Classnotes_V1_UploadTranscriptRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.uploadTranscript(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClassNotes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List class notes
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listClassNotes<Result>(
        _ message: Classnotes_V1_ListClassNotesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_ListClassNotesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Classnotes_V1_ListClassNotesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listClassNotes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetClassNote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a class note
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getClassNote<Result>(
        _ message: Classnotes_V1_GetClassNoteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Classnotes_V1_GetClassNoteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Classnotes_V1_GetClassNoteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getClassNote(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteClassNote" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a class note
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteClassNote<Result>(
        _ message: Classnotes_V1_DeleteClassNoteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Classnotes_V1_DeleteClassNoteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteClassNote(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}